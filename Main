import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import re
from pyecharts.charts import Map, Geo
from pyecharts import options as opts
from scipy.stats import ks_2samp
from sklearn.decomposition import PCA
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

import seaborn as sns

#读入数据
data=pd.read_csv(r"C:\\Users\\liueh\\Desktop\\multivariate\\final\\fifa19.csv")
data

#数据清理
length=len(data)

#weight
def convert_weight(var):
    """
    convert the string number to a float
    _ 去除lbs单位
    """
    new_value = var.replace("lbs","")
    return float(new_value)
data['Weight']=data["Weight"].apply(convert_weight)



#wage
def convert_wage(var):
    """
    convert the string number to a float
    - 删去$和K
    """
    new_value = var.replace("$","").replace("K","000").replace("€","")
    return float(new_value)
data['Wage']=data["Wage"].apply(convert_wage)

#height
def convert_height(var):
    """
    convert the string number to a float
    - 转化为浮点数类型
    - 转化为厘米为单位
    """
    temp1=var[0]
    temp2=var[2]
    new_value =float(temp1)*30.48+float(temp2)*2.54
    return new_value
data['Height']=data["Height"].apply(convert_height)
data['Height']

#player's physical traits_age hitograms
group=[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]
plt.hist(data['Age'], group, histtype='bar', rwidth=0.8)
plt.axvline(25.1,color='black',label='Mean Age')
plt.legend()
plt.xlabel("Age-Group")
plt.ylabel("Frequency")
plt.savefig('age.jpg')

#player's physical traits_height hitograms
group=[150,155,160,165,170,175,180,185,190,195,200]
plt.hist(data['Height'],group,histtype='bar', rwidth=0.8)
plt.axvline(181.3,color='black',label='Mean Height')
plt.legend()
plt.xlabel("Height-Group")
plt.ylabel("Frequency")
plt.savefig('weight.jpg')

#player's physical traits_weight hitograms
group=[140,145,150,155,160,165,170,175,180,185,190,195,200]
plt.hist(data['Weight'],group,histtype='bar', rwidth=0.8)
plt.axvline(data['Weight'].mean(),color='black',label='Mean Weight/lbs')
plt.legend()
plt.xlabel("Weight-Group")
plt.ylabel("Frequency")
plt.savefig('height.jpg')

#player's physical traits_wage hitograms
group=[0,5000,10000,15000,20000,25000,30000,40000]
plt.hist(data['Wage'],group,histtype='bar', rwidth=0.8)
plt.axvline(data['Wage'].mean(),color='black',label='Mean Wage/Euros')
plt.legend()
plt.xlabel("Wage-Group")
plt.ylabel("Frequency")
plt.savefig('Wage.jpg')

#球员nationality
data.groupby('Nationality').count()
nationality=data.groupby('Nationality').count()['ID']
value=nationality.tolist()
attr=nationality.index.tolist()
def map_world() -> Map:
    c = (
        Map()
        .add("Most Popular Countries" ,[list(z) for z in zip(attr, nationality)], "world")
        .set_series_opts(label_opts=opts.LabelOpts(is_show=False))
        .set_global_opts(
            title_opts=opts.TitleOpts(title="Player Distribution"),
            visualmap_opts=opts.VisualMapOpts(max_=200),)
        )
    return c
map_world().render_notebook()

forward=['RF', 'ST', 'LF', 'RS', 'RW', 'LS', 'LW', 'CF']
midfield=['RCM', 'LCM', 'LDM', 'CAM', 'CDM', 'RM', 'LAM', 'LM', 'RDM', 'CM', 'RAM']
defense=['RCB', 'CB', 'LCB', 'LB', 'RB', 'RWB', 'LWB']
position=data.groupby('Position')
#overall和potential均值比较
forwardmean_overall=0;
forwardmean_potential=0;
midfieldfmean_overall=0;
midfieldmean_potential=0;
defensemean_overall=0;
defensemean_potential=0;
for i in forward:
    forwardmean_overall=forwardmean_overall+position.get_group(i)['Overall'].mean()
    forwardmean_potential=forwardmean_potential+position.get_group(i)['Potential'].mean()
for i in midfield:
    midfieldfmean_overall=midfieldfmean_overall+position.get_group(i)['Overall'].mean()
    midfieldfmean_potential=midfieldfmean_potential+position.get_group(i)['Potential'].mean()
for i in defense:
    defensemean_overall=defensemean_overall+position.get_group(i)['Overall'].mean()
    defensemean_potential=defensemean_potential+position.get_group(i)['Potential'].mean()
forwardmean_overall=forwardmean_overall/8
forwardmean_potential=forwardmean_potential/8
midfieldfmean_overall=midfieldfmean_overall/11
midfieldfmean_potential=midfieldfmean_potential/11
defensemean_overall=defensemean_overall/7
defensemean_potential=defensemean_potential/7

#总体比较-overall，k-s检验
forwardoverall=[]
for i in forward:
    forwardoverall=forwardoverall+position.get_group(i)['Overall'].tolist()
midfieldoverall=[]
for i in midfield:
    midfieldoverall=midfieldoverall+position.get_group(i)['Overall'].tolist()
defenseoverall=[]
for i in defense:
    defenseoverall=defenseoverall+position.get_group(i)['Overall'].tolist()
ks_2samp(forwardoverall, midfieldoverall)
ks_2samp(forwardoverall, defenseoverall)
ks_2samp(midfieldoverall, defenseoverall)
#得出结论，中场和后场的差别较大，前场中场与前场后场的评分差别不大

#总体比较-potential，k-s检验
forwardpotential=[]
for i in forward:
    forwardpotential=forwardpotential+position.get_group(i)['Potential'].tolist()
midfieldpotential=[]
for i in midfield:
    midfieldpotential=midfieldpotential+position.get_group(i)['Potential'].tolist()
defensepotential=[]
for i in defense:
    defensepotential=defensepotential+position.get_group(i)['Potential'].tolist()
ks_2samp(forwardpotential, midfieldpotential)
ks_2samp(forwardpotential, defensepotential)
ks_2samp(midfieldpotential, defensepotential)

#一个典型的ST是什么样子的，多元线性回归
st=position.get_group('ST')
head=['Crossing','Finishing','HeadingAccuracy','ShortPassing','Volleys','Dribbling','Curve','FKAccuracy','LongPassing','BallControl','Acceleration','SprintSpeed','Agility','Reactions','Balance','ShotPower','Jumping','Stamina','Strength','LongShots','Aggression','Interceptions','Positioning','Vision','Penalties','Composure','Marking','StandingTackle','SlidingTackle']
stdata=st[head]#把st中的分数放进去啦
pca=PCA(n_components=5)
stdata_p=pca.fit(stdata).transform(stdata)
print('各主成分贡献度：{}'.format(pca.explained_variance_ratio_))

plt.figure()
plt.scatter(stdata_p[:,0],stdata_p[:,1],c=st['Overall'],alpha=0.5,label=['class1,class2,class3,class4,class5'])
plt.legend()
plt.title('PCA of ST')
plt.savefig('PCA.jpg')

#对st进行多元回归分析
X_train,X_test,Y_train,Y_test=train_test_split(stdata,st['Overall'],train_size=0.8)
print("原始数据特征：",stdata.shape,
     "训练数据特征",X_train.shape,"测试数据特征:",X_test.shape)
print("原始数据标签：",st['Overall'].shape,"训练数据标签：",Y_train.shape,",测试数据标签:",Y_test.shape)

model=LinearRegression()
model.fit(X_train,Y_train)

model=LinearRegression()
model.fit(X_train,Y_train)

intercept=model.intercept_
intercept

coef=model.coef_
coef

score=model.score(X_test,Y_test)
score

y_pred=model.predict(X_test)
plt.plot(range(len(y_pred)),y_pred,'b',label='predict')
plt.savefig('predict.jpg')
plt.show()

y_pred=model.predict(X_test)
plt.plot(range(len(y_pred)),y_pred,'b',label='predict')
plt.plot(range(len(Y_test)),Y_test,'g',label='test')
plt.savefig('ROC.jpg')
plt.show()

from sklearn.metrics import explained_variance_score,mean_absolute_error,mean_squared_error,median_absolute_error,r2_score
print('线性回归模型的平均绝对误差为：',
     mean_absolute_error(Y_test,y_pred))
print('线性回归模型的均方误差为：',
     mean_squared_error(Y_test,y_pred))
print('线性回归模型的中值绝对误差为：',
     median_absolute_error(Y_test,y_pred))
print('线性回归模型的可解释方差值为：',
     explained_variance_score(Y_test,y_pred))
print('线性回归模型的R方值为：',
     r2_score(Y_test,y_pred))
     
     newhead=['Finishing','BallControl','Positioning','ShotPower','HeadingAccuracy']
newst=st[newhead]
X_train1,X_test1,Y_train1,Y_test1=train_test_split(newst,st['Overall'],train_size=0.8)
print("原始数据特征：",newst.shape,
     "训练数据特征",X_train1.shape,"测试数据特征:",X_test1.shape)
print("原始数据标签：",st['Overall'].shape,"训练数据标签：",Y_train1.shape,",测试数据标签:",Y_test1.shape)

model1=LinearRegression()
model1.fit(X_train1,Y_train1)

score=model1.score(X_test1,Y_test1)
score
intercept=model1.intercept_
intercept
coef=model1.coef_
coef

y_pred1=model1.predict(X_test1)
plt.plot(range(len(y_pred1)),y_pred1,'b',label='predict')

plt.show()

y_pred=model1.predict(X_test1)
plt.plot(range(len(y_pred1)),y_pred,'b',label='predict')
plt.plot(range(len(Y_test1)),Y_test,'g',label='test')
plt.savefig('ROC.jpg')
plt.show()

print('线性回归模型的平均绝对误差为：',
     mean_absolute_error(Y_test1,y_pred1))
print('线性回归模型的均方误差为：',
     mean_squared_error(Y_test1,y_pred1))
print('线性回归模型的中值绝对误差为：',
     median_absolute_error(Y_test1,y_pred1))
print('线性回归模型的可解释方差值为：',
     explained_variance_score(Y_test1,y_pred1))
print('线性回归模型的R方值为：',
     r2_score(Y_test1,y_pred1))
     
     newhead1=['Overall','Finishing','BallControl','Positioning','ShotPower','HeadingAccuracy']
newst1=st[newhead1]
newst1.boxplot()
plt.savefig('Wage.jpg')

newst1.corr()

sns.pairplot(newst1, x_vars=['Finishing','BallControl','Positioning','ShotPower','HeadingAccuracy'], y_vars='Overall', size=7, aspect=0.8,kind = 'reg')
